
Dynamic loader for OCaml.

Given a list of cmxs objects (typically only one, corresponding to a program
to execute), ld_ocaml scans the filesystem to find the available (.cmxs)
libraries, infers which are needed in order to load the objects, and then
proceeds to load them all in order.

Requirements
------------
OCaml >= 3.10 with native dynamic linking support (.cmxs files).

Building
--------

  $ omake

Usage
-----

  ld_ocaml foo.cmxs -other --options --are --ignored

looks for .cmxs libraries and loads those required by foo.cmxs. Arg.current is
updated to point to the first non-cmxs option, so foo.cmxs can use Arg to
parse the remaining command line.

ld_ocaml honors these environment variables:

 LD_OCAML_VERBOSE

    set to 0 for no output (default), 1 for information about the libs that
    will be loaded, 2 for debug info

 LD_OCAML_CACHE

    name of the cache file (default: $HOME/.ld.ocaml.cache)

 LD_OCAML_LIBRARY_PATH

    list of extra paths (separated by :) where .cmxs libraries can be found,
    in addition to the standard directories. The information about these libs
    will not be saved in the cache.

 LD_OCAML_SYS_LIBRARY_PATH

    list of paths (separated by :) where system .cmxs libraries can be
    found. The information about these libs will be saved in the cache.
    (defaults to (/usr/lib/ocaml, /usr/local/lib/ocaml, and their subdirs))
    (Note: you should use absolute paths.)

 LD_OCAML_EXTRA_SYS_LIBRARY_PATH

    list of extra paths (separated by :) where system .cmxs libraries can be
    found. The information about these libs will be saved in the cache.
    (Note: you should use absolute paths.)


ld_ocaml caches the system DLL catalog to the file specified in LD_OCAML_CACHE
($HOME/.ld.ocaml.cache by default).  Delete that file to force a system
catalog rebuild when new libraries are installed.

Creating the .cmxs libraries
----------------------------
Given a .cmxa file with PIC code, you can create the cmxs as follows:

  ocamlopt -shared -o foo.cmxs foo.cmxa -linkall

For instance, AAA batteries needs camomile.cmxs and nums.cmxs, which can be
built that way (other modules, including Thread, Dynlink, Unix and Str, are
already included in ld_ocaml's runtime).

Program compilation
-------------------
Let's suppose you want to compile a program that links against AAA Bateries.
You'd normally do

   ocamlfind ocamlopt -package aaa -o hello hello.ml -linkpkg

which would link statically against AAA's libs and all its dependencies.
In order to create a cmxs that can be run with

  ld_ocaml hello.cmxs

you simply do

  ocamlfind ocamlopt -package aaa -shared -o hello.cmx

The difference is that we don't link against the AAA package anymore, and the
dynamic libs will be loaded as required by ld_ocaml (you'll have to make sure
the required .cmxs libs are available, though --- see the above section).

How it works
------------
.cmxs files hold information about the interfaces they import ("imports_cmi")
and the implementations they are tied to because of inlining ("imports_cmx").
This information is an OCaml string associated to the "caml_plugin_header"
symbol which corresponds to a Marshal serialization of the header (see
ld_header.ml). ld_ocaml looks for .cmxs files and builds a DLL catalog
which is later used to resolve dependencies as needed.

